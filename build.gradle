plugins {
    id 'java'
    id 'idea'
    id 'io.github.goooler.shadow' version '8.1.7' // Use Shadow fork that supports Java 21
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'maven-publish'
}

version = "${mod_version}-${mc_version}"
group = "com.tfar.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

loom {
    accessWidenerPath = file("src/main/resources/citadel.accesswidener")
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.mc_version
    inputs.property "loader_version", project.loader_version
    inputs.property "fabric_version", project.fabric_version
    inputs.property "architectury_version", project.architectury_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.mc_version,
                "loader_version": project.loader_version,
                "fabric_version": project.fabric_version,
                "architectury_version": project.architectury_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

repositories{
    mavenCentral()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        //maven for all github project releases
        url "https://jitpack.io"
    }

    mavenCentral()
    mavenLocal()
    maven {
        url "https://maven.parchmentmc.org"
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }

    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }

    maven { url "https://maven.architectury.dev/" }

    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.mc_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.21:2024.07.28@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "dev.architectury:architectury-fabric:${architectury_version}"

    modApi "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:${forge_config_version}"

    //jaadec fork by yours truly to decode mp4 audio
    shadow ('net.sourceforge.jaadec:JAADec:0.8.8') {
        ['commons-logging', 'org.slf4j'].each {
            exclude group: "$it"
        }
    }
    //jcodec for decoding mp4 video
    shadow ('org.jcodec:jcodec:0.2.5') {
        exclude group: 'net.sourceforge.jaad.aac'
        ['commons-logging', 'org.slf4j', 'net.sourceforge.jaad.aac'].each {
            exclude group: "$it"
        }
    }
}

configurations {
    all*.exclude group: 'net.sourceforge.jaad', module:'jcodec'
}

jar {
    afterEvaluate {
        configurations.shadow.each { dep ->
            from(project.zipTree(dep)){
                exclude 'META-INF', 'META-INF/**'
            }
        }

    }
}

//builds the jar with shadowed dependencies
shadowJar {
    configurations = [project.configurations.shadow]
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    relocate 'net.sourceforge.jaad', 'com.github.alexthe666.citadel.repack.jaad'
    relocate 'org.jcodec', 'com.github.alexthe666.citadel.repack.jcodec'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

remapJar {
    inputFile.set shadowJar.archiveFile
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    dependsOn shadowJar
    archiveClassifier.set(null)
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}