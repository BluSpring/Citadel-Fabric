plugins {
    id 'java'
    id 'fabric-loom' version '1.3-SNAPSHOT'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

configurations {
    shade
    library
    library.extendsFrom(shade)
    implementation.extendsFrom(library)
}

version = "${mod_version}-${mc_version}"
group = "com.tfar.${modid}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${modid}"
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

loom {
    accessWidenerPath = file("src/main/resources/citadel.accesswidener")
}

repositories{
    mavenCentral()
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
    maven {
        name = "CurseMaven"
        url = "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        //maven for all github project releases
        url "https://jitpack.io"
    }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }

    mavenCentral()
    maven {
        name = "Fuzs Mod Resources"
        url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
    }

    maven {
        name = "DevOS One"
        url = ("https://mvn.devos.one/snapshots/")
    }

    maven {
        name = "Cafeteria Dev"
        url = ("https://maven.cafeteria.dev/releases/")
        content {
            includeGroup("dev.cafeteria")
        }
    }

    maven {
        name = "JamiesWhiteShirt Dev"
        url = ("https://maven.jamieswhiteshirt.com/libs-release")
        content {
            includeGroup("com.jamieswhiteshirt")
        }
    }

    maven { url "https://maven.architectury.dev/" }

    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.19.2:2022.11.27@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.minecraftforge:forgeconfigapiport-fabric:4.2.11"

    implementation 'com.electronwill.night-config:core:3.6.5'
    implementation 'com.electronwill.night-config:toml:3.6.5'

    // @Nullable
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    include(modImplementation("io.github.fabricators_of_create.Porting-Lib:porting-lib:2.1.875+1.19.2"))
    include modImplementation("com.jamieswhiteshirt:reach-entity-attributes:2.3.0")
    include(modApi("com.github.KiltMC:ForgeBiomeModifiers:834a616002"))

    include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:0.2.0-beta.9")))

    modApi "dev.architectury:architectury-fabric:6.5.85"

    //jaadec fork by yours truly to decode mp4 audio
    shade ('com.github.AlexModGuy:JAADec:master-SNAPSHOT') {
        ['commons-logging', 'org.slf4j'].each {
            exclude group: "$it"
        }
    }
    //jcodec for decoding mp4 video
    shade ('org.jcodec:jcodec:0.2.5') {
        exclude group: 'net.sourceforge.jaad.aac'
        ['commons-logging', 'org.slf4j', 'net.sourceforge.jaad.aac'].each {
            exclude group: "$it"
        }
    }
}

configurations {
    all*.exclude group: 'net.sourceforge.jaad', module:'jcodec'
}

sourceSets {
    main.resources.srcDirs += 'src/generated/resources'
}

jar {
    afterEvaluate {
        configurations.shade.each { dep ->
            from(project.zipTree(dep)) {
                exclude 'META-INF', 'META-INF/**'
            }
        }
    }
}
// Example for how to get properties into the manifest for reading by the runtime..
jar {
    duplicatesStrategy 'exclude'
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "citadel",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"citadel",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}


//builds the jar with shadowed dependencies
shadowJar {
    configurations = [project.configurations.shade]
    duplicatesStrategy 'exclude'
    relocate 'net.sourceforge.jaad', 'com.github.alexthe666.citadel.repack.jaad'
    relocate 'org.jcodec', 'com.github.alexthe666.citadel.repack.jcodec'
    finalizedBy 'remapJar'
}

assemble.dependsOn(shadowJar)

jar.finalizedBy('remapJar')